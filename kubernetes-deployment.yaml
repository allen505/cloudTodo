apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: app-data-pvc
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 1Gi
  storageClassName:
    gp2
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: erinamiller/cloudtodo:v1
        ports:
        - containerPort: 5000
        env:
        - name: MONGO_HOST
          value: mongodb-service
        - name: MONGO_PORT
          value: "27017"
        - name: FLASK_ENV
          value: "development"
        - name: FLASK_RUN_PORT
          value: "5000"
        # livenessProbe:
        #   httpGet:
        #     path: /liveness
        #     port: 5000
        #   initialDelaySeconds: 5
        #   timeoutSeconds: 2
        #   periodSeconds: 5
        #   failureThreshold: 2
        
        # readinessProbe:
        #   httpGet:
        #     path: /readiness
        #     port: 5000
        #   initialDelaySeconds: 10
        #   timeoutSeconds: 3
        #   periodSeconds: 10
        #   failureThreshold: 3

---

apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        volumeMounts:
        - name: app-data
          mountPath: /data/db
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "pass"
      volumes:
      - name: app-data
        persistentVolumeClaim:
          claimName: app-data-pvc

---

apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  type: LoadBalancer
  selector:
    app: flask-app
  ports:
    - protocol: TCP
      port: 5000
      targetPort: 5000

---

apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP