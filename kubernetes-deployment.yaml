apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-app-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask-app
  template:
    metadata:
      labels:
        app: flask-app
    spec:
      containers:
      - name: flask-app
        image: erinamiller/cloudtodo:latest
        ports:
        - containerPort: 5000
        env:
        - name: MONGO_HOST
          # value: "mongodb-service.default.svc.cluster.local"
          value: mongodb-service
        - name: MONGO_PORT
          value: "27017"
        - name: FLASK_ENV
          value: "development"
        # - name: FLASK_APP
        #   value: "app.py"
        # - name: FLASK_RUN_HOST
        #   value: "0.0.0.0"
        - name: FLASK_RUN_PORT
          value: "5000"
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: mongodb-deployment
spec:
  replicas: 1
  selector:
    matchLabels:
      app: mongodb
  template:
    metadata:
      labels:
        app: mongodb
    spec:
      containers:
      - name: mongodb
        image: mongo:latest
        ports:
        - containerPort: 27017
        command:
        - "bash"
        - "-c"
        - |
          apt-get update && apt-get install -y mongodb-clients
          mongod --auth --bind_ip_all
        # - "mongod"
        # - "--auth"
        # - "--bind_ip_all"
        env:
        - name: MONGO_INITDB_ROOT_USERNAME
          value: "root"
        - name: MONGO_INITDB_ROOT_PASSWORD
          value: "pass"
---
apiVersion: v1
kind: Service
metadata:
  name: flask-app-service
spec:
  type: NodePort
  selector:
    app: flask-app
  ports:
  - protocol: TCP
    port: 5000
    targetPort: 5000
  # type: LoadBalancer
---
apiVersion: v1
kind: Service
metadata:
  name: mongodb-service
spec:
  selector:
    app: mongodb
  ports:
  - protocol: TCP
    port: 27017
    targetPort: 27017
  type: ClusterIP